---
- name: Create db
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ nextcloud_db }}"
    state: present

- name: Create user
  become: yes
  become_user: postgres
  postgresql_user:
    db: "{{ nextcloud_db }}"
    name: "{{ nextcloud_db_user }}"
    password: "{{ nextcloud_db_pass }}"

- name: Access for the new user
  become: yes
  become_user: postgres
  postgresql_privs:
    db: "{{ nextcloud_db }}"
    role: "{{ nextcloud_db_user }}"
    type: database
    privs: ALL

- name: Download tarball
  get_url:
    url: https://download.nextcloud.com/server/releases/nextcloud-{{nc_ver}}.tar.bz2
    dest: /root/nextcloud-{{nc_ver}}.tar.bz2
    checksum: sha256:https://download.nextcloud.com/server/releases/nextcloud-{{nc_ver}}.tar.bz2.sha256
  register: tarball

- name: Extract the tarball
  unarchive:
    src: /root/nextcloud-{{nc_ver}}.tar.bz2
    dest: /var/www/
    copy: no
  when: tarball.changed

- name: Recursively change ownership of a directory
  file:
    path: "{{ nextcloud_install_dir }}"
    state: directory
    recurse: yes
    owner: "{{ nextcloud_user }}"
    group: "{{ nextcloud_group }}"

- name: Make custom data dir
  file:
    path: "{{ nextcloud_data_dir }}"
    state: directory
    owner: "{{ nextcloud_user }}"
    group: "{{ nextcloud_group }}"
    mode: 0770

- name: Installation version {{ nc_ver }} via occ
  become: true
  become_user: "{{ nextcloud_user }}"
  shell:
    chdir: "{{ nextcloud_install_dir }}"
    cmd: >-
      php occ maintenance:install
      --database "{{ nextcloud_db_type }}"
      --database-name "{{ nextcloud_db }}"
      --database-user "{{ nextcloud_db_user }}"
      --database-pass "{{ nextcloud_db_pass }}"
      --admin-user "{{ nextcloud_admin_name }}"
      --admin-pass "{{ nextcloud_admin_pass }}"
      --data-dir "{{ nextcloud_data_dir }}"
  register: occ_result
  failed_when: "occ_result.stderr and 'Did you mean one of these' not in occ_result.stderr"
  changed_when: "'Nextcloud was successfully installed' in occ_result.stdout"

# "occ config:system:set" always returns 0 exit code.
# This awful workaround has been invented for the sake to make the task idempotent
- name: Configuring memory caching via occ
  become: true
  become_user: "{{ nextcloud_user }}"
  shell:
    chdir: "{{ nextcloud_install_dir }}"
    cmd: "{{ item.cmd }}:get {{ item.item }}&&echo _EXISTS||{{ item.cmd }}:set {{ item.item }} {{ item.value }}"
  loop:
              - { cmd: 'php occ config:system', item: 'memcache.locking', value: '--value=\\OC\\Memcache\\Redis' }
              - { cmd: 'php occ config:system', item: 'redis port', value: '--value=6379' }
              - { cmd: 'php occ config:system', item: 'redis host', value: '--value=localhost' }
              - { cmd: 'php occ config:system', item: 'memcache.local', value: '--value=\\OC\\Memcache\\Redis' }
  register: occ_config
  changed_when: "'_EXISTS' not in occ_config.stdout and occ_config.rc == 0"

- name: Add Nginx config
  template:
    src: templates/nextcloud.conf.j2
    dest: /etc/nginx/sites-available/{{nextcloud_server_name}}.conf
  notify: restart nginx

- name: Enable Nginx config
  file:
    src: /etc/nginx/sites-available/{{nextcloud_server_name}}.conf
    dest: /etc/nginx/sites-enabled/{{nextcloud_server_name}}.conf
    state: link
  notify: restart nginx

- name: Disable default Nginx
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: restart nginx

- name: Add cron job
  cron:
    name: Nextcloud housekeeping operations
    minute: '5'
    job: php -f {{nextcloud_install_dir}}/cron.php
    user: "{{ nextcloud_user }}"